# NSM Project Configuration
# This file configures development tools and can be shared across worktrees

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "nsm"
version = "0.1.0"
description = "Neural Symbolic Model - Hierarchical Semantic Reasoning Architecture"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "TBD"}
authors = [
    {name = "NSM Development Team"}
]
keywords = ["neurosymbolic", "graph-neural-networks", "hierarchical-reasoning", "interpretable-ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "torch>=2.1.0",
    "torch-geometric>=2.4.0",
    "numpy>=1.24.3",
    "scipy>=1.11.3",
    "networkx>=3.1",
    "matplotlib>=3.8.0",
    "pyyaml>=6.0.1",
    "tqdm>=4.66.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.2",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.9.1",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.5.1",
    "pre-commit>=3.4.0",
]

viz = [
    "plotly>=5.17.0",
    "seaborn>=0.12.2",
    "pygraphviz>=1.11",
]

experiment = [
    "tensorboard>=2.14.1",
    "wandb>=0.15.12",
    "jupyter>=1.0.0",
]

docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

all = ["nsm[dev,viz,experiment,docs]"]

[project.urls]
"Homepage" = "https://linear.app/imajn/project/neural-symbolic-model-nsm-hierarchical-semantic-reasoning-architecture-af57a8ece32c"
"Bug Tracker" = "https://linear.app/imajn/team/IMA/all"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--cov=nsm",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "cuda: marks tests that require CUDA",
    "integration: marks tests as integration tests",
    "symmetry: marks tests for WHY/WHAT symmetry",
    "confidence: marks tests for confidence propagation",
    "gradient: marks tests for gradient flow",
]

# Coverage configuration
[tool.coverage.run]
branch = true
source = ["nsm"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true once codebase matures
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = "torch_geometric.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "networkx.*"
ignore_missing_imports = true

# Ruff configuration (fast linter)
[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
